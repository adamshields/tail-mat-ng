/**
* Custom Title Strategy for handling page titles across the application.
* Automatically formats titles based on URL segments and includes application IDs where relevant.
* 
* Handles several cases:
* - Basic pages: "USERS | Adam"
* - Pages with App ID: "DESIGNS - 1234 | Adam"
* - Resource detail pages: "SERVER - 123 | Adam"
* - CamelCase pages: "SYSTEM LOOKUP TABLES | Adam"
*/
@Injectable()
export class AutoTitleStrategy extends TitleStrategy {
 /** Application name to be appended to all titles */
 private readonly appName = 'Adam';

 /**
  * Updates the document title based on the current route state
  * @param routerState Current router state snapshot
  */
 override updateTitle(routerState: RouterStateSnapshot): void {
   if (!routerState) return;
   const segments = routerState.url.split('/').filter(Boolean);
   const lastPath = segments[segments.length - 1];
   const parentPath = segments[segments.length - 2];
   const appId = segments[1]; // Gets application ID from URL (e.g., /applications/1234/...)

   let title: string;

   // Handle resource detail pages (e.g., server/123)
   if (this.isNumeric(lastPath)) {
     title = `${this.formatTitle(parentPath)} - ${lastPath}`;
   } else {
     const formattedPath = this.formatCamelCase(lastPath);
     
     // Add appId to title if it exists and is numeric
     title = appId && this.isNumeric(appId) 
       ? `${formattedPath} - ${appId}`
       : formattedPath;
   }

   document.title = `${title.toUpperCase()} | ${this.appName}`;
 }

 /**
  * Checks if a string is a numeric value
  * @param value String to check
  * @returns True if string contains only numbers
  */
 private isNumeric(value: string): boolean {
   return /^\d+$/.test(value);
 }

 /**
  * Formats a string to uppercase
  * @param text String to format
  * @returns Uppercase string
  */
 private formatTitle(text: string): string {
   return text.toUpperCase();
 }

 /**
  * Formats camelCase strings with spaces and uppercase
  * @param text CamelCase string to format
  * @returns Formatted uppercase string with spaces
  * @example "systemLookupTables" -> "SYSTEM LOOKUP TABLES"
  */
 private formatCamelCase(text: string): string {
   return text
     .replace(/([A-Z])/g, ' $1') // Add space before capital letters
     .trim()
     .toUpperCase();
 }
}
