/**
 * Custom Title Strategy that handles all page title scenarios:
 * - Regular pages: "USERS"
 * - App-level pages: "DESIGNS - APP 1234"
 * - Design resources: "APP 1234 - DESIGN 10 - SERVERS"
 * - Resource details: "APP 1234 - DESIGN 10 - SERVER 1"
 * - CamelCase pages: "LOOKUP TABLES - APP 1234"
 * - Details pages: "DESIGNS - APP 1234"
 */
@Injectable()
export class AutoTitleStrategy extends TitleStrategy {
  private readonly appName = 'Adam';

  override updateTitle(routerState: RouterStateSnapshot): void {
    if (!routerState) return;
    const segments = routerState.url.split('/').filter(Boolean);
    const lastPath = segments[segments.length - 1];
    const appId = segments[1];
    
    let title: string;

    // Check if we're in a details section
    if (segments.includes('details')) {
      title = `${this.formatCamelCase(lastPath)} - APP ${appId}`;
    }
    // Check if we're in a design section with resources
    else if (segments.includes('designs') && segments.length > 4) {
      const designId = segments[segments.indexOf('designs') + 1];
      const isResourceDetail = this.isNumeric(lastPath);
      const resourceType = isResourceDetail ? segments[segments.length - 2] : lastPath;

      title = `APP ${appId} - DESIGN ${designId} - ${this.formatCamelCase(resourceType)}`;
      if (isResourceDetail) {
        title += ` ${lastPath}`;
      } else {
        title += 'S';
      }
    } 
    // Handle regular pages with appId
    else if (appId && this.isNumeric(appId)) {
      const pageName = this.formatCamelCase(lastPath);
      title = `${pageName} - APP ${appId}`;
    }
    // Handle basic pages
    else {
      title = this.formatCamelCase(lastPath);
    }

    document.title = `${title.toUpperCase()} | ${this.appName}`;
  }

  private isNumeric(value: string): boolean {
    return /^\d+$/.test(value);
  }

  private formatCamelCase(text: string): string {
    return text
      .replace(/([A-Z])/g, ' $1')
      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1 $2')
      .trim();
  }
}
