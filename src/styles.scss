
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.
@use './_m3-palettes' as palettes; // Import your custom palette
@tailwind base;
@tailwind components;
@tailwind utilities;
// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the theme object.
$theme: mat.define-theme((
  color: (
    theme-type: light,
    primary: palettes.$adam-palette,
    tertiary: palettes.$green-palette,
  ),
  density: (
    scale: 0,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
:root {
  @include mat.all-component-themes($theme);

  // Generate CSS variables for each color and tone from palette.
  @each $color in (primary, secondary, tertiary, neutral, neutral-variant, error) {
    @each $tone in (0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 99, 100) {
      --mat-#{$color}-#{$tone}: #{mat.get-theme-color($theme, $color, $tone)};
    }
  }
}

// Comment out the line below if you want to use the pre-defined typography utility classes.
// For more information: https://material.angular.io/guide/typography#using-typography-styles-in-your-application.
// @include mat.typography-hierarchy($tail-mat-ng-theme);

// Comment out the line below if you want to use the deprecated `color` inputs.
// @include mat.color-variants-backwards-compatibility($tail-mat-ng-theme);

html, body { height: 100%; }
body { margin: 0;  }

.tertiary-button {
  @include mat.button-color($theme, $color-variant: tertiary);
}
